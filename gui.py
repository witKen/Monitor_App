
# This file was generated by the Tkinter Designer by Parth Jadhav

# https://github.com/ParthJadhav/Tkinter-Designer



from pathlib import Path


# from tkinter import *

# Explicit imports to satisfy Flake8

from tkinter import Label, StringVar, Tk, Canvas, Entry, Text, Button, PhotoImage, Toplevel
import customtkinter
import re



OUTPUT_PATH = Path(__file__).parent

ASSETS_PATH = OUTPUT_PATH / Path(r"/home/arrowdot/Documents/Monitor_App/assets/frame0")



def relative_to_assets(path: str) -> Path:

    return ASSETS_PATH / Path(path)


window = Tk()


window.geometry("1024x720")

window.configure(bg = "#FFFFFF")


entry_font = customtkinter.CTkFont(family="Arial", size=16)



username_error_message = StringVar()  # String variable for username error
password_error_message = StringVar()  # String variable for password error


def register():

    # get information
    username = username_entry.get()
    password = password_entry.get()

    username_error = ""
    password_error = ""

    # validate username
    if len(username) == 0 or len(password) == 0: 
        username_error = "Username cannot be empty."
        password_error = "Password cannot be empty."
        return
    if len(password) < 8:
        password_error = "Password must contains at least 8 characters"
    # store information (add your logic here)
    # window.destroy()
    # import gui1
    # gui1.window
    username_error_message.set(username_error)  # Update error message variables
    password_error_message.set(password_error)


    if username_error or password_error:  # Check for any errors
        return  # Exit function if there are errors


def popup_screen(message = ''):
   top= Toplevel(window)
   top.geometry("550x250")
   top.title("Invalid input")
   top.configure(bg="#FFFFFF")
   
   # Center the popup window
   top.geometry("+%d+%d" % (window.winfo_screenwidth() // 2 - 375, window.winfo_screenheight() // 2 - 175))

   Label(top, text= message, font=('Arial 18 bold'), background="#FFFFFF").place(x=125,y=100)




canvas = Canvas(

    window,

    bg = "#FFFFFF",

    height = 720,

    width = 1024,

    bd = 0,

    highlightthickness = 0,

    relief = "ridge"

)


canvas.place(x = 0, y = 0)

canvas.create_text(

    484.5166015625,

    91.0,

    anchor="nw",

    text="Robot Cafe",

    fill="#11284C",

    font=("CADTMonoDisplay Regular", 40 * -1)

)


image_image_1 = PhotoImage(

    file=relative_to_assets("image_1.png"))

image_1 = canvas.create_image(

    427.0,

    90.0,

    image=image_image_1

)




username_entry = customtkinter.CTkEntry(

    window, 

    placeholder_text="Username", 

    placeholder_text_color='#11284c',

    font=entry_font, 

    border_color='#11284c',

    corner_radius=0,  

    height=64,

    width=440

)  

username_entry.place(

    x=293.0,

    y=262.0,

)


username_error_label = Label(

    window, 
    textvariable=username_error_message, 
    fg="red", 
    font=("Arial", 10)
)
username_error_label.place(x=293, y=330)  # Adjust placement as needed



password = StringVar()  #Password variable
bullet = "\u2022"       #specifies bullet character

password_entry = customtkinter.CTkEntry(

    window, 

    placeholder_text="Password", 

    font=entry_font,

    placeholder_text_color='#11284c', 

    border_color='#11284c',

    corner_radius=0,  

    height=64,

    width=440, 

    textvariable=password, 

    show=bullet, 

  
)



password_entry.place(

    x=293.0,

    y=360.77496337890625,

)

password_error_label = Label(
    window, textvariable=password_error_message, fg="red", font=("Arial", 10)
)
password_error_label.place(x=293, y=440)  # Adjust placement as needed





# def show_message(error='',  color ='black'):
#     error_label = None  # Access the global variable

#     if error_label is None:  # Create the label if it doesn't exist
#         error_label = customtkinter.CTkLabel(
#             window, text=error, fg=color, font=("Arial", 12), 
#         )
#         error_label.place(x=293, y=295)  # Adjust placement as needed
#     else:
#         error_label.config(text=error, fg=color)  # Update existing label


# def validate(username):
#     """
#     Checks if the username contains only alphanumeric characters and underscores.
#     """
#     pattern = r"^[a-zA-Z0-9_]+$"
#     return bool(re.fullmatch(pattern, username))

# def on_invalid(validate):
#     """
#     Shows the error message if the username is invalid.
#     """
#     show_message( 'Username can only contain letters, numbers, and underscores.', 'red')



button_image_1 = PhotoImage(

    file=relative_to_assets("button_1.png"))

button_submit = Button(

    image=button_image_1,

    borderwidth=0,

    highlightthickness=0,

    command=register,

    relief="flat"

)

button_submit.place(

    x=293.0,

    y=485.15826416015625,

    width=439.0,

    height=65.8499984741211

)



window.resizable(False, False)

window.mainloop() 





