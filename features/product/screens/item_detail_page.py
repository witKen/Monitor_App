
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


import asyncio
from io import BytesIO
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import NW,  Label, Scrollbar, Tk, Canvas, Entry, Text, Button, PhotoImage, Toplevel, Frame
# from tkinter.tix import IMAGETEXT
from PIL import Image, ImageTk
import requests




OUTPUT_PATH2 = Path(__file__).parent
ASSETS_PATH2 = OUTPUT_PATH2.parent.parent.parent / "assets/frame2"

def relative_to_assets2(path: str) -> Path:
    return ASSETS_PATH2 / Path(path)




class ItemDetailPage(Frame):
    def __init__(self, parent, drink_id, drink_flavour, drink_price, drink_description, drink_image):
        super().__init__(parent)
        
        self.drink_id = drink_id
        self.drink_flavour = drink_flavour
        self.drink_price = drink_price
        self.drink_description = drink_description
        self.drink_image = drink_image
        self.quantity = 1
        self.tkraise()
        self.pack(side="left", fill="both", expand=True)
        
        # Set main window to maximum screen
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        self.geometry(f"{screen_width}x{screen_height}+0+0")
        
        # self.geometry("1024x720")
        # self.configure(bg = "#FFFFFF")
        # root = Tk()
        # canvas1 = Canvas(root)
        # canvas1.pack()
    
        
        canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 720,
            width = 1024,
            relief = "ridge"
        )
        
        canvas.pack(fill="both", expand=True)
        
        canvas.create_rectangle(
            0.0,
            0.0,
            1024.0,
            560,
            fill="#FF4438",
        )

        ################# Title ##############
        title = f"{self.drink_flavour}"
        title_text = Label(canvas, foreground="#FFFFFF", background="#FF4438",font=('Arial', 32), text=title, justify="center")
        title_text.pack(pady=50, side="top", anchor="center")
        
        
        def load_image_from_url(url):
            response = requests.get(url)
            img = Image.open(BytesIO(response.content))
            img = img.resize((250, 250), Image.ADAPTIVE)
            return ImageTk.PhotoImage(img)
        
        image = load_image_from_url(drink_image) 
        image_object = PhotoImage(file=relative_to_assets2("image_1.png"))
        
        canvas1 = Canvas(canvas, width=409, height=374)  # Adjust size if needed
        canvas1.pack() 
        image_label = Label(canvas1, image=image_object, bg="#FF4438")
        image_label.image = image_object
        canvas1.create_window(0, 0, window=image_label, anchor="nw")
        
        image_logo = Label(canvas1, image=image, width=250, height=250)
        image_logo.image = image
        canvas1.create_window(86, 50, window=image_logo, anchor="nw")
        button_image_1 = PhotoImage(
            file=relative_to_assets2("button_1.png")
        )
        button_1 = Button(
            canvas,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            bg="#FF4438",
            command=lambda:print("button_1 clicked"),
            relief="flat"
        )
        button_1.image = button_image_1
        # canvas2.create_window(0, 0, window=button_1, anchor="w")
        # button_1.place(
        #     x=354.0,
        #     y=600.0,
        #     width=316.0545654296875,
        #     height=66.37145233154297
        # )
        button_1.pack(padx=354, pady=64)

        button_image_2 = PhotoImage(
            file=relative_to_assets2("button_2.png")
        )
        button_2 = Button(
            canvas,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command= self.go_back,
            relief="flat"
        )
        button_2.image = button_image_2

        button_2.place(x=86, y=50)

        canvas.create_text(
            18.0,
            236.0,
            anchor="nw",
            text="Medium Size Drink",
            fill="#FFFFFF",
            font=("Niradei Bold", 28 * -1)
        )


        canvas.create_text(
            716.0,
            252.0,
            anchor="nw",
            text="Sugar 70%",
            fill="#FFFFFF",
            font=("Niradei Regular", 28 * -1)
        )
  

        canvas.create_text(
            90.0,
            378.0,
            anchor="nw",
            text="Stay Refreshing",
            fill="#FFFFFF",
            font=("Niradei Regular", 28 * -1)
        )



        canvas.create_text(
            723.0,
            394.0,
            anchor="nw",
            text="Fresh Milk",
            fill="#FFFFFF",
            font=("Niradei Bold", 28 * -1)
        )

        canvas.create_rectangle(
            843.0,
            0.0,
            937.8163681030273,
            122.78878021240234,
            fill="#11284C",
            outline="")

        canvas.create_text(
            865.0,
            38.0,
            anchor="nw",
            text=f"${drink_price}",
            fill="#FFFFFF",
            font=("Niradei Bold", 36 * -1)
        )
    
    def go_back(self):
        print("Go back to menu")
        self.pack_forget()
        # self.destroy()
        
        # # self.master.destroy()
        import features.product.screens.product_menu_page as product_menu_page
        if not hasattr(product_menu_page, 'window') or product_menu_page.window.winfo_exists() == 0: 
        # Check if the window exists or has been destroyed
            # product_menu_page.canvas_container.pack()
            product_menu_page.frame_screen.lift()
            # product_menu_page.create_drink_menu()  # Initialize and create the window
        # product_menu_page.canvas_container.pack()
        # product_menu_page.frame_screen.pack()
        # product_menu_page.canvas1.pack()
        # product_menu_page.scrollable_frame.pack()
        # product_menu_page.scrollbar.pack()
        # product_menu_page.top_canvas.pack()
        # product_menu_page.loop = asyncio.get_event_loop()       
        # product_menu_page.loop.run_until_complete(product_menu_page.create_drink_menu())

        # product_menu_page.canvas1.pack()
        # product_menu_page.scrollable_frame.pack()
        # product_menu_page.scrollbar.pack()
        # product_menu_page.top_canvas.pack()

        # product_menu_page.window
        # # screen_width = product_menu_page.window.winfo_screenwidth()
        # # Scrollable canvas setup
        # # canvas_container = Frame(product_menu_page.window)  # A container for canvas and scrollbar
        # # canvas_container.pack(side="left", fill="both", expand=True)

        # product_menu_page.canvas1.pack()
        # product_menu_page.scrollable_frame.pack()
        # product_menu_page.scrollbar.pack()
        # product_menu_page.top_canvas.pack()
        # product_menu_page.create_drink_menu()
        # # # Scrolling setup
        # canvas1 = Canvas(canvas_container, bg="white")
        # canvas1.pack(side="left", fill="both", expand=True)
        # scrollable_frame = Frame(canvas1, bg="white", width=720) # Adjust width as needed
        # scrollable_frame.bind( # Configure for dynamic scroll region
        #     "<Configure>",
        #     lambda e: canvas1.configure(
        #         scrollregion=canvas1.bbox("all")
        #     )
        # )

        # def on_mousewheel(event):
        #     if event.delta:
        #         canvas1.yview_scroll(int(-1 * (event.delta / 120) * 3), "pages")  # Windows
        #     else:
        #         if event.num == 5:
        #             canvas1.yview_scroll(1, "units") 
        #         elif event.num == 4:
        #             canvas1.yview_scroll(-1, "units") 

        # # Bind mousewheel to the canvas
        # canvas1.bind_all("<MouseWheel>", on_mousewheel)

        # # canvas.configure(yscrollcommand=scrollbar.set)
        # # Create drinks frame
        # drinks_frame = Frame(scrollable_frame, bg="white")
        # drinks_frame.pack(pady=210, padx=10, side="left")

        # scrollbar = Scrollbar(product_menu_page.window, orient="vertical", command=canvas1.yview)
        # scrollbar.pack(side="right", fill="y")
        # canvas1.configure(yscrollcommand=scrollbar.set)
        # canvas1.create_window(0, 0, window=scrollable_frame, anchor='nw') 

        # # # Top canvas
        
        # # top_canvas = Canvas(scrollable_frame, bg="#FFFFFF", height=200, width=window.winfo_screenwidth(), bd=0, highlightthickness=0, relief="ridge")
        # # top_canvas.place(x=0, y=0)
        # # top_canvas.create_text(64.0, 117.0, anchor="nw", text="Choose your drink", fill="#11284C", font=("Niradei Bold", 32 * -1))

        # top_canvas = Canvas(
        #     scrollable_frame,
        #     bg = "#FFFFFF",
        #     height = 200,
        #     width = screen_width,
        #     bd = 0,
        #     highlightthickness = 0,
        #     relief = "ridge"
        # )
        # top_canvas.place(x = 0, y = 0)
        # top_canvas.create_text(
        #     64.0,
        #     117.0,
        #     anchor="nw",
        #     text="Choose your drink",
        #     fill="#11284C",
        #     font=("Niradei Bold", 32 * -1)
        # )
        # image_image_1 = PhotoImage(file=relative_to_assets("image_1.png"))
        # top_canvas.create_image(
        #     108.0,
        #     49.0,
        #     image=image_image_1
        # )
        # top_canvas.create_text(
        #     164.3662109375,
        #     37.4525146484375,
        #     anchor="nw",
        #     text="Robot Cafe",
        #     fill="#11284C",
        #     font=("CADTMonoDisplay Regular", 32 * -1)
        # )
        # loop = asyncio.get_event_loop()       
        # loop.run_until_complete(product_menu_page.create_drink_menu())
        
